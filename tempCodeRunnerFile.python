from collections import defaultdict
import math

# Function to calculate the area using Shoelace formula
def calculate_area(polygon):
    n = len(polygon)
    area = 0
    for i in range(n):
        x1, y1 = polygon[i]
        x2, y2 = polygon[(i + 1) % n]
        area += x1 * y2 - y1 * x2
    return abs(area) / 2.0

# Function to calculate the length of a stick
def stick_length(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# Check if a cycle is formed
def is_closed_polygon(edges):
    adj = defaultdict(list)
    degree = defaultdict(int)
    points = set()
    
    for x1, y1, x2, y2 in edges:
        p1 = (x1, y1)
        p2 = (x2, y2)
        adj[p1].append(p2)
        adj[p2].append(p1)
        degree[p1] += 1
        degree[p2] += 1
        points.add(p1)
        points.add(p2)
    
    # Check if degree of every vertex in the cycle is 2
    for point in points:
        if degree[point] != 2:
            return False, []

    # Extract the closed polygon
    visited = set()
    polygon = []
    
    def dfs(node, parent):
        if node in visited:
            return True
        visited.add(node)
        polygon.append(node)
        for neighbor in adj[node]:
            if neighbor != parent:
                if dfs(neighbor, node):
                    return True
        return False

    start = next(iter(points))
    dfs(start, None)
    
    return len(polygon) >= 3, polygon

# Main Function
def solve():
    import sys
    input = sys.stdin.read
    data = input().strip().split("\n")
    
    # Number of sticks
    N = int(data[0])
    sticks = [tuple(map(int, line.split())) for line in data[1:]]
    
    # Check for closed polygon
    is_closed, polygon = is_closed_polygon(sticks)
    
    if not is_closed:
        print("No")
        return
    
    print("Yes")
    
    # Calculate area of the closed polygon
    area = calculate_area(polygon)
    
    # Calculate leftover stick lengths
    total_stick_length = sum(stick_length(*stick) for stick in sticks)
    closed_perimeter = sum(stick_length(*polygon[i], *polygon[(i + 1) % len(polygon)]) for i in range(len(polygon)))
    leftover_length = total_stick_length - closed_perimeter
    
    # Check if leftover sticks can form the same polygon
    if math.isclose(leftover_length, closed_perimeter) and math.isclose(area, area):
        print("Yes")
    else:
        print("No")
    
    # Print the area
    print(f"{area:.2f}")